using System.Collections;
using System.Collections.Concurrent;
using Wanadi.Common.Enums;
using Wanadi.Common.Extensions;
using Wanadi.Common.Helpers;
using Wanadi.MySql.Contracts.DataWrapper;

namespace Wanadi.MySql.Wrappers;

public static class DataWrapper
{
    /// <summary>
    ///     <para>
    ///         pt-BR: Flag que indica o que será feito com as propriedades do tipo Guid no momento da criação do script de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Flag that indicates what will be done with the Guid type properties when creating the insert script.
    ///     </para>
    ///     <para>
    ///         Exemplo/Example:
    ///     </para>
    ///     <code>
    ///         DataWrapper.GuidOption = GuidConditions.IgnoreOnInsert;
    ///     </code>
    ///     <code>
    ///         DataWrapper.GuidOption = GuidConditions.CastToString;
    ///     </code>
    /// </summary>
    public static GuidConditions GuidOption = GuidConditions.IgnoreOnInsert;

    /// <summary>
    ///     <para>
    ///         pt-BR: Flag que indica o que será feito com as propriedades do tipo Enum no momento da criação do script de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Flag that indicates what will be done with the Enum type properties when creating the insert script.
    ///     </para>
    ///     <para>
    ///         Exemplo/Example:
    ///     </para>
    ///     <code>
    ///         DataWrapper.EnumOption = EnumConditions.IgnoreOnInsert;
    ///     </code>
    ///     <code>
    ///         DataWrapper.EnumOption = EnumConditions.CastToString;
    ///     </code>
    ///     <code>
    ///         DataWrapper.EnumOption = EnumConditions.CastToInt;
    ///     </code>
    /// </summary>
    public static EnumConditions EnumOption = EnumConditions.CastToInt;

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera o script de inserção em banco do objeto. Utiliza o TableAttribute ou objectType.Name como nome da tabela.
    ///     </para>
    ///     <para>
    ///         en-US: Generates the object database insert script. Uses the TableAttribute or objectType.Name as the table name.
    ///     </para>
    /// </summary>
    /// <param name="itemInsert">
    ///     <para>
    ///         pt-BR: Objeto a ser gerado o script de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Object to be generated by the insert script.
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Objeto contendo o script para inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Object containing the script for insertion.
    ///     </para>
    /// </returns>
    public static InsertCommand? GenerateInsertCommand(object itemInsert, params string[] fieldsIgnore)
    {
        if (itemInsert == null)
            return null;

        return GenerateInsertCommand(itemInsert.GetType().GetTableName(), itemInsert, fieldsIgnore);
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera o script de inserção em banco do objeto. 
    ///     </para>
    ///     <para>
    ///         en-US: Generates the object database insert script.
    ///     </para>
    /// </summary>
    /// <param name="tableName">
    ///     <para>
    ///         pt-BR: Nome da tabela a ser utilizado no comando de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Name of the table to be used in the insert command.
    ///     </para>
    /// </param>
    /// <param name="itemInsert">
    ///     <para>
    ///         pt-BR: Objeto a ser gerado o script de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Object to be generated by the insert script.
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Objeto contendo o script para inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Object containing the script for insertion.
    ///     </para>
    /// </returns>
    public static InsertCommand? GenerateInsertCommand(string tableName, object itemInsert, params string[] fieldsIgnore)
    {
        if (itemInsert == null)
            return null;

        var properties = GetObjectPropertiesByType(itemInsert.GetType(), fieldsIgnore);
        return new InsertCommand(tableName, $"INSERT INTO `{tableName}` ({(string.Join(",", properties.Select(t => $"`{t.ColumnName}`")))}) VALUES ", itemInsert.GetValuesByProperties(properties));
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera o script de inserção em banco da coleção de objetos. Utiliza o TableAttribute ou objectType.Name como nome da tabela.
    ///     </para>
    ///     <para>
    ///         en-US: Generates the object collection database insertion script. Uses the TableAttribute or objectType.Name as the table name.
    ///     </para>
    /// </summary>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Lista de objeto contendo o script para inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of object containing the script for insertion.
    ///     </para>
    /// </returns>
    public static List<InsertCommand> GenerateInsertCommands(IList sourceItems, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<InsertCommand>();

        var tableName = sourceItems.GetTableName();
        if (string.IsNullOrEmpty(tableName))
            throw new Exception("Unable to identify table name or object name.");

        return GenerateInsertCommands(tableName, sourceItems, fieldsIgnore);
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera o script de inserção em banco da coleção de objetos. 
    ///     </para>
    ///     <para>
    ///         en-US: Generates the object collection database insertion script.
    ///     </para>
    /// </summary>
    /// <param name="tableName">
    ///     <para>
    ///         pt-BR: Nome da tabela a ser utilizado no comando de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Name of the table to be used in the insert command.
    ///     </para>
    /// </param>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Lista de objeto contendo o script para inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of object containing the script for insertion.
    ///     </para>
    /// </returns>
    public static List<InsertCommand> GenerateInsertCommands(string tableName, IList sourceItems, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<InsertCommand>();

        var properties = GetObjectPropertiesByType(sourceItems.GetType().GetGenericArguments()[0], fieldsIgnore);

        var prefixCommand = $"INSERT INTO `{tableName}` ({(string.Join(",", properties.Select(t => $"`{t.ColumnName}`")))}) VALUES ";

        sourceItems.AsParallel();

        var response = new List<InsertCommand>();

        foreach (var item in sourceItems)
        {
            response.Add(new InsertCommand(tableName, prefixCommand, item.GetValuesByProperties(properties)));
        }

        return response;
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera o script de inserção em banco da coleção de objetos. Utiliza o TableAttribute ou objectType.Name como nome da tabela. Utiliza Parallel.ForEach para gerar os registros.
    ///     </para>
    ///     <para>
    ///         en-US: Generates the object collection database insertion script. Uses the TableAttribute or objectType.Name as the table name. Uses Parallel.ForEach to generate the records.
    ///     </para>
    /// </summary>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Lista de objeto contendo o script para inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of object containing the script for insertion.
    ///     </para>
    /// </returns>
    public static List<InsertCommand> GenerateInsertCommandsParallel(IList sourceItems, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<InsertCommand>();

        var tableName = sourceItems.GetTableName();
        if (string.IsNullOrEmpty(tableName))
            throw new Exception("Unable to identify table name or object name.");

        return GenerateInsertCommandsParallel(tableName, sourceItems, fieldsIgnore);
    }

    ///<summary>
    ///     <para>
    ///         pt-BR: Gera o script de inserção em banco da coleção de objetos. Utiliza Parallel.ForEach para gerar os registros.
    ///     </para>
    ///     <para>
    ///         en-US: Generates the object collection database insertion script. Uses Parallel.ForEach to generate the records.
    ///     </para>
    /// </summary>
    /// <param name="tableName">
    ///     <para>
    ///         pt-BR: Nome da tabela a ser utilizado no comando de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Name of the table to be used in the insert command.
    ///     </para>
    /// </param>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Lista de objeto contendo o script para inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of object containing the script for insertion.
    ///     </para>
    /// </returns>
    public static List<InsertCommand> GenerateInsertCommandsParallel(string tableName, IList sourceItems, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<InsertCommand>();

        var properties = GetObjectPropertiesByType(sourceItems.GetType().GetGenericArguments()[0], fieldsIgnore);

        var prefixCommand = $"INSERT INTO `{tableName}` ({(string.Join(",", properties.Select(t => $"`{t.ColumnName}`")))}) VALUES ";

        sourceItems.AsParallel();

        var response = new ConcurrentBag<InsertCommand>();

        var parallelResult = Parallel.ForEach(sourceItems.Cast<object>(), currentItem =>
        {
            response.Add(new InsertCommand(tableName, prefixCommand, currentItem.GetValuesByProperties(properties)));
        });

        while (!parallelResult.IsCompleted)
        {
            continue;
        }

        return response.ToList();
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera os scripts de inserção para a lista de objetos informada e retorna os lotes de inserção já criados para serem executados no banco de dados. Utiliza o TableAttribute ou objectType.Name como nome da tabela. 
    ///     </para>
    ///     <para>
    ///         en-US: Generates the insertion scripts for the informed list of objects and returns the already created insertion batches to be executed in the database. Uses the TableAttribute or objectType.Name as the table name.
    ///     </para>
    /// </summary>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="quantityPerBatch">
    ///     <para>
    ///         pt-BR: Quantidades de registros que serão agrupados por lote.
    ///     </para>
    ///     <para>
    ///         en-US: Quantities of records that will be grouped by batch.
    ///     </para>
    /// </param>
    /// <param name="disableKeyCheks">
    ///     <para>
    ///         pt-BR: Se true: insere no script o comando de desabilitar checagem de chaves no mysql. SET foreign_key_checks = 0; COMANDO_GERADO SET foreign_key_checks = 1;
    ///     </para>
    ///     <para>
    ///         en-US: If true: inserts the command to disable key checking in mysql into the script. SET foreign_key_checks = 0; GENERATED_COMMAND SET foreign_key_checks = 1;
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Retorna lista de lotes de inserção separados pela quantidade informada na chamada do método.
    ///     </para>
    ///     <para>
    ///         en-US: Returns a list of insertion batches separated by the quantity entered in the method call.
    ///     </para>
    /// </returns>
    public static List<BatchCommand> GenerateBatchCommands(IList sourceItems, int quantityPerBatch, bool disableKeyCheks = false, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<BatchCommand>();

        var tableName = sourceItems.GetTableName();
        if (string.IsNullOrEmpty(tableName))
            throw new Exception("Unable to identify table name or object name.");

        return GenerateBatchCommands(tableName, sourceItems, quantityPerBatch, disableKeyCheks, fieldsIgnore);
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera os scripts de inserção para a lista de objetos informada e retorna os lotes de inserção já criados para serem executados no banco de dados. 
    ///     </para>
    ///     <para>
    ///         en-US: Generates the insertion scripts for the informed list of objects and returns the already created insertion batches to be executed in the database.
    ///     </para>
    /// </summary>
    /// <param name="tableName">
    ///     <para>
    ///         pt-BR: Nome da tabela a ser utilizado no comando de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Name of the table to be used in the insert command.
    ///     </para>
    /// </param>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="quantityPerBatch">
    ///     <para>
    ///         pt-BR: Quantidades de registros que serão agrupados por lote.
    ///     </para>
    ///     <para>
    ///         en-US: Quantities of records that will be grouped by batch.
    ///     </para>
    /// </param>
    /// <param name="disableKeyCheks">
    ///     <para>
    ///         pt-BR: Se true: insere no script o comando de desabilitar checagem de chaves no mysql. SET foreign_key_checks = 0; COMANDO_GERADO SET foreign_key_checks = 1;
    ///     </para>
    ///     <para>
    ///         en-US: If true: inserts the command to disable key checking in mysql into the script. SET foreign_key_checks = 0; GENERATED_COMMAND SET foreign_key_checks = 1;
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Retorna lista de lotes de inserção separados pela quantidade informada na chamada do método.
    ///     </para>
    ///     <para>
    ///         en-US: Returns a list of insertion batches separated by the quantity entered in the method call.
    ///     </para>
    /// </returns>
    public static List<BatchCommand> GenerateBatchCommands(string tableName, IList sourceItems, int quantityPerBatch, bool disableKeyCheks = false, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<BatchCommand>();

        if (string.IsNullOrEmpty(tableName))
            throw new Exception("Unable to identify table name or object name.");

        var insertCommands = GenerateInsertCommands(tableName, sourceItems, fieldsIgnore);
        return GenerateBatchCommands(insertCommands, quantityPerBatch, disableKeyCheks);
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera os scripts de inserção para a lista de objetos informada e retorna os lotes de inserção já criados para serem executados no banco de dados. Utiliza o TableAttribute ou objectType.Name como nome da tabela. Utiliza Parallel.ForEach.
    ///     </para>
    ///     <para>
    ///         en-US: Generates the insertion scripts for the informed list of objects and returns the already created insertion batches to be executed in the database. Uses the TableAttribute or objectType.Name as the table name. Using Parallel.ForEach.
    ///     </para>
    /// </summary>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="quantityPerBatch">
    ///     <para>
    ///         pt-BR: Quantidades de registros que serão agrupados por lote.
    ///     </para>
    ///     <para>
    ///         en-US: Quantities of records that will be grouped by batch.
    ///     </para>
    /// </param>
    /// <param name="disableKeyCheks">
    ///     <para>
    ///         pt-BR: Se true: insere no script o comando de desabilitar checagem de chaves no mysql. SET foreign_key_checks = 0; COMANDO_GERADO SET foreign_key_checks = 1;
    ///     </para>
    ///     <para>
    ///         en-US: If true: inserts the command to disable key checking in mysql into the script. SET foreign_key_checks = 0; GENERATED_COMMAND SET foreign_key_checks = 1;
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Retorna lista de lotes de inserção separados pela quantidade informada na chamada do método.
    ///     </para>
    ///     <para>
    ///         en-US: Returns a list of insertion batches separated by the quantity entered in the method call.
    ///     </para>
    /// </returns>
    public static List<BatchCommand> GenerateBatchCommandsParallel(IList sourceItems, int quantityPerBatch, bool disableKeyCheks = false, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<BatchCommand>();

        var tableName = sourceItems.GetTableName();
        if (string.IsNullOrEmpty(tableName))
            throw new Exception("Unable to identify table name or object name.");

        return GenerateBatchCommandsParallel(tableName, sourceItems, quantityPerBatch, disableKeyCheks, fieldsIgnore);
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Gera os scripts de inserção para a lista de objetos informada e retorna os lotes de inserção já criados para serem executados no banco de dados. Utiliza Parallel.ForEach.
    ///     </para>
    ///     <para>
    ///         en-US: Generates the insertion scripts for the informed list of objects and returns the already created insertion batches to be executed in the database. Using Paralle.ForEach.
    ///     </para>
    /// </summary>
    /// <param name="tableName">
    ///     <para>
    ///         pt-BR: Nome da tabela a ser utilizado no comando de inserção.
    ///     </para>
    ///     <para>
    ///         en-US: Name of the table to be used in the insert command.
    ///     </para>
    /// </param>
    /// <param name="sourceItems">
    ///     <para>
    ///         pt-BR: Coleção de objetos a ser gerado os scripts. Use apenas para lista de objetos de tipos únicos.
    ///     </para>
    ///     <para>
    ///         en-US: Collection of objects to be generated by scripts. Use only for list of objects of single types.
    ///     </para>
    /// </param>
    /// <param name="quantityPerBatch">
    ///     <para>
    ///         pt-BR: Quantidades de registros que serão agrupados por lote.
    ///     </para>
    ///     <para>
    ///         en-US: Quantities of records that will be grouped by batch.
    ///     </para>
    /// </param>
    /// <param name="disableKeyCheks">
    ///     <para>
    ///         pt-BR: Se true: insere no script o comando de desabilitar checagem de chaves no mysql. SET foreign_key_checks = 0; COMANDO_GERADO SET foreign_key_checks = 1;
    ///     </para>
    ///     <para>
    ///         en-US: If true: inserts the command to disable key checking in mysql into the script. SET foreign_key_checks = 0; GENERATED_COMMAND SET foreign_key_checks = 1;
    ///     </para>
    /// </param>
    /// <param name="fieldsIgnore">
    ///     <para>
    ///         pt-BR: Opcional. O nome das propriedades informados, serão removidos do insert. (Ex: Campos Id que não possuam a DatabaseGeneratedAttribute devem ser informados aqui)
    ///     </para>
    ///     <para>
    ///         en-US: Optional. The name of the properties entered will be removed from the insert. (Ex: Id fields that do not have the DatabaseGeneratedAttribute must be entered here)
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Retorna lista de lotes de inserção separados pela quantidade informada na chamada do método.
    ///     </para>
    ///     <para>
    ///         en-US: Returns a list of insertion batches separated by the quantity entered in the method call.
    ///     </para>
    /// </returns>
    public static List<BatchCommand> GenerateBatchCommandsParallel(string tableName, IList sourceItems, int quantityPerBatch, bool disableKeyCheks = false, params string[] fieldsIgnore)
    {
        if (sourceItems == null || sourceItems.Count == 0)
            return new List<BatchCommand>();

        if (string.IsNullOrEmpty(tableName))
            throw new Exception("Unable to identify table name or object name.");

        var insertCommands = GenerateInsertCommandsParallel(tableName, sourceItems, fieldsIgnore);
        return GenerateBatchCommands(insertCommands, quantityPerBatch, disableKeyCheks);
    }

    /// <summary>
    ///     <para>
    ///         pt-BR: Agrupa uma lista de objetos de inserção em comandos em lote.
    ///     </para>
    ///     <para>
    ///         en-US: Groups a list of insert objects into batch commands.
    ///     </para>
    /// </summary>
    /// <param name="source">
    ///     <para>
    ///         pt-BR: Lista de InsertCommand para serem agrupados em lotes. Agrupa por nome de tabela e segrega em quantidades definida na chamada do lote.
    ///     </para>
    ///     <para>
    ///         en-US: List of InsertCommand to be grouped into batches. Groups by table name and segregates into quantities defined in the batch call.
    ///     </para>
    /// </param>
    /// <param name="quantityPerBatch">
    ///     <para>
    ///         pt-BR: Quantidades de registros que serão agrupados por lote.
    ///     </para>
    ///     <para>
    ///         en-US: Quantities of records that will be grouped by batch.
    ///     </para>
    /// </param>
    /// <param name="disableKeyCheks">
    ///     <para>
    ///         pt-BR: Se true: insere no script o comando de desabilitar checagem de chaves no mysql. SET foreign_key_checks = 0; COMANDO_GERADO SET foreign_key_checks = 1;
    ///     </para>
    ///     <para>
    ///         en-US: If true: inserts the command to disable key checking in mysql into the script. SET foreign_key_checks = 0; GENERATED_COMMAND SET foreign_key_checks = 1;
    ///     </para>
    /// </param>
    /// <returns>
    ///     <para>
    ///         pt-BR: Retorna lista de lotes de inserção separados pela quantidade informada na chamada do método.
    ///     </para>
    ///     <para>
    ///         en-US: Returns a list of insertion batches separated by the quantity entered in the method call.
    ///     </para>
    /// </returns>
    public static List<BatchCommand> GenerateBatchCommands(List<InsertCommand> source, int quantityPerBatch, bool disableKeyCheks = false)
    {
        var response = new List<BatchCommand>();

        var groupedTables = source.GroupBy(t => t.TableName)
                                  .Select(t => new
                                  {
                                      TableName = t.Key,
                                      RecordsToInsert = t.ToList(),
                                      Count = t.Count()
                                  })
                                  .ToList();

        source.Clear();

        foreach (var groupedTable in groupedTables)
        {
            var batchCount = MathHelper.CalculateIterations(groupedTable.Count, quantityPerBatch);

            for (int i = 0; i < batchCount; i++)
            {
                response.Add(new BatchCommand(groupedTable.RecordsToInsert.Skip(i * quantityPerBatch).Take(quantityPerBatch).ToList(), disableKeyCheks));
            }
        }

        groupedTables.Clear();

        return response;
    }

    private static List<ObjectProperty> GetObjectPropertiesByType(Type objectType, params string[] fieldsIgnore)
    {
        var response = objectType.GetProperties()
                                 .Where(t => !fieldsIgnore.Contains(t.Name))
                                 .Select(t => new ObjectProperty(t, EnumOption, GuidOption))
                                 .Where(t => !t.IgnoreOnInsert)
                                 .OrderBy(t => t.ColumnName)
                                 .ToList();

        return response;
    }

    private static List<ValueProperty> GetValuesByProperties(this object item, List<ObjectProperty> properties)
    {
        var objectType = item.GetType();

        return properties.Select(t => new ValueProperty(objectType, item, t, EnumOption, GuidOption)).ToList();
    }
}